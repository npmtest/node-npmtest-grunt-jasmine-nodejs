{"/home/travis/build/npmtest/node-npmtest-grunt-jasmine-nodejs/test.js":"/* istanbul instrument in package npmtest_grunt_jasmine_nodejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jasmine-nodejs/lib.npmtest_grunt_jasmine_nodejs.js":"/* istanbul instrument in package npmtest_grunt_jasmine_nodejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_jasmine_nodejs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_jasmine_nodejs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jasmine-nodejs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-jasmine-nodejs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_jasmine_nodejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_jasmine_nodejs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_jasmine_nodejs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_jasmine_nodejs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_jasmine_nodejs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_jasmine_nodejs.__dirname + '/lib.npmtest_grunt_jasmine_nodejs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jasmine-nodejs/node_modules/grunt-jasmine-nodejs/tasks/jasmine.task.js":"/**\n *  Jasmine Grunt Task for NodeJS.\n *  @author   Onur Yıldırım (onur@cutepilot.com)\n *  @license  MIT\n */\nmodule.exports = function (grunt) {\n    'use strict';\n\n    // Core modules\n    var path = require('path');\n\n    // Own modules\n    var JasmineRunner = require('./lib/jasmine.runner');\n\n    // Dep modules\n    var reporters = require('jasmine-reporters'),\n        JasmineConsoleReporter = require('jasmine-console-reporter'),\n        _ = require('lodash'),\n        glob = require('glob');\n\n    // --------------------------------\n    //  UTILITY METHODS\n    // --------------------------------\n\n    function normalizeSuffixes(suffixes) {\n        return typeof suffixes === 'string'\n            ? suffixes.split(',')\n            : (Array.isArray(suffixes) ? suffixes : null);\n    }\n\n    function endsWith(str, suffix) {\n        if (!str || !suffix) return false;\n        return str.toLowerCase().indexOf(suffix.toLowerCase())\n            === str.length - suffix.length;\n    }\n\n    function hasSuffix(suffixes, filePath) {\n        if (!filePath) return false;\n        return (suffixes || []).some(function (suffix) {\n            return endsWith(filePath, suffix);\n        });\n    }\n\n    // TODO: suffixes are deprecated. We'll remove related stuff when we\n    // permanently drop suffixes.\n    function expand(patterns, suffixes) {\n        var globs = [],\n            nonGlobs = [];\n\n        // distinguish non-glob, full file paths so that we can add them without\n        // needing to check for a suffix-match.\n        patterns.forEach(function (pattern) {\n            if (glob.hasMagic(pattern)) {\n                globs.push(pattern);\n            } else if (grunt.file.isFile(pattern)) {\n                nonGlobs.push(pattern);\n            }\n        });\n\n        var suffixesDefined = Array.isArray(suffixes) && suffixes.length > 0;\n        var expandOptions = {\n            // matchBase: true,\n            filter: function (filePath) {\n                return grunt.file.isFile(filePath)\n                    && (!suffixesDefined || hasSuffix(suffixes, filePath.toLowerCase()));\n            }\n        };\n\n        // filter and expand globs\n        var files = grunt.file.expand(expandOptions, globs);\n        // concat non-glob file paths\n        files = files.concat(nonGlobs);\n        // resolve file paths\n        return files.map(function (file) {\n            return path.resolve(file);\n        });\n    }\n\n\t// --------------------------------\n\t//  SPEC FILTERING\n\t// --------------------------------\n\n    function specFilter(pattern, files) {\n        var specPattern,\n            patternArray,\n            filteredArray = [],\n            scriptSpecs = [],\n            matchPath = function (path) {\n                return Boolean(path.match(specPattern));\n            };\n\n        if (pattern) {\n            // For '*' to work as a wildcard.\n            pattern = pattern.split('*').join('[\\\\S]*').replace(/\\./g, '\\\\.');\n            // This allows for comma separated strings to which we can match the\n            // spec files.\n            patternArray = pattern.split(',');\n\n            while (patternArray.length > 0) {\n                pattern = (patternArray.splice(0, 1)[0]);\n                if (pattern.length > 0) {\n                    if (pattern.indexOf('/') === -1) {\n                        specPattern = new RegExp('(' + pattern + '[^/]*)(?!/)$', 'ig');\n                    } else if (pattern.indexOf('/') === 0) {\n                        specPattern = new RegExp('(' + pattern + '[^/]*)(?=/)', 'ig');\n                    } else {\n                        throw new Error('--filter flag seems to be in the wrong format.');\n                    }\n\n                    // push is usually faster than concat.\n                    [].push.apply(scriptSpecs, files.filter(matchPath));\n                }\n            }\n            filteredArray = _.uniq(scriptSpecs);\n        }\n\n        return filteredArray;\n    }\n\n    // --------------------------------\n    //  TASK DEFINITION\n    // --------------------------------\n\n    grunt.registerMultiTask('jasmine_nodejs', 'Jasmine Grunt Task for NodeJS.', function () {\n        var task = this,\n            // Mark the task as async\n            taskComplete = task.async(),\n            conf = grunt.config.get([this.name, this.target]);\n\n        var options = task.options({\n            // suffixes are deprecated. they no longer default to a predefined\n            // value so they must be explicitly set.\n            specNameSuffix: null, // 'spec.js',\n            helperNameSuffix: null, // 'helper.js',\n            helpers: [], // global helpers for all targets\n            useHelpers: true,\n            random: false,\n            seed: null,\n            defaultTimeout: null, // defaults to 5000 ms\n            stopOnFailure: false,\n            traceFatal: true,\n            reporters: {}\n            // , customReporters: []\n        });\n\n        var jasmineRunner = new JasmineRunner({\n                stopOnFailure: options.stopOnFailure,\n                random: options.random,\n                seed: options.seed,\n                defaultTimeout: options.defaultTimeout\n            }),\n            enabledReporters = [],\n            ropts = options.reporters,\n            helperFiles;\n\n        // HELPER METHODS\n\n        // Handler to be executed witin `reporter.jasmineDone()`. We should\n        // execute this callback only once, when all reporters are completed.\n        // So we keep a counter.\n        var cc = 0;\n        function onComplete(passed) {\n            cc++;\n            if (cc >= enabledReporters.length) {\n                if (passed) {\n                    grunt.log.ok('Successful!');\n                }\n                taskComplete(passed);\n                cc = 0;\n            }\n            if (Array.isArray(helperFiles)) {\n                jasmineRunner.unloadHelpers(helperFiles);\n            }\n        }\n\n        // Extends default console reporter options\n        function getConsoleReporterOpts(opts) {\n            opts = opts || {};\n            opts.print = function () {\n                grunt.log.write.apply(this, arguments);\n            };\n            // checking this here for the old name `verbose` (now alias).\n            opts.verbosity = opts.verbosity === undefined\n                ? opts.verbose\n                : opts.verbosity;\n            return opts;\n        }\n\n        function addReporter(reporter) {\n            try {\n                reporter = jasmineRunner.addReporter(reporter, onComplete);\n                enabledReporters.push(reporter.name);\n            } catch (error) {\n                grunt.log.error(error);\n            }\n        }\n\n        // BUILT-IN REPORTERS\n        // additional Jasmine reporters\n        // https://github.com/larrymyers/jasmine-reporters\n        var reporter;\n\n        // Reporters that only write to a file:\n        if (ropts.junit) {\n            reporter = new reporters.JUnitXmlReporter(ropts.junit);\n            reporter.name = 'JUnit XML Reporter';\n            addReporter(reporter);\n        }\n        if (ropts.nunit) {\n            reporter = new reporters.NUnitXmlReporter(ropts.nunit);\n            reporter.name = 'NUnit XML Reporter';\n            addReporter(reporter);\n        }\n\n        // We will not allow reporters producing command-line output to run at\n        // the same time, to prevent puzzled outputs.\n        var conflict = Boolean(ropts.console);\n        if (!conflict && ropts.terminal) {\n            conflict = true;\n            reporter = new reporters.TerminalReporter(ropts.terminal);\n            reporter.name = 'Terminal Reporter';\n            addReporter(reporter);\n        }\n        if (!conflict && ropts.teamcity) {\n            conflict = true;\n            reporter = new reporters.TeamCityReporter(); // no options to set\n            reporter.name = 'TeamCity Reporter';\n            addReporter(reporter);\n        }\n        if (!conflict && ropts.tap) {\n            conflict = true;\n            reporter = new reporters.TapReporter(); // no options to set\n            reporter.name = 'TAP Reporter';\n            addReporter(reporter);\n        }\n\n        // CUSTOM JASMINE REPORTERS\n\n        if (Array.isArray(options.customReporters)) {\n            options.customReporters.forEach(function (customReporter, index) {\n                customReporter.name = customReporter.name\n                    || 'Custom Reporter #' + (index + 1);\n                addReporter(customReporter);\n            });\n        }\n\n        // DEFAULT REPORTER\n\n        // Finally add the default (console) reporter if set/needed.\n        if (enabledReporters.length === 0 || ropts.console) {\n            var crOpts = getConsoleReporterOpts(ropts.console),\n                consoleReporter = new JasmineConsoleReporter(crOpts);\n            // consoleReporter already has `name` property defined\n            addReporter(consoleReporter);\n        }\n\n        grunt.verbose.writeln('Enabled Reporters:\\n  ', enabledReporters.join(', ') || 'none');\n\n        // UNCAUGHT/FATAL EXCEPTION STACKS\n\n        // On a fatal error (i.e. uncaughtException), Grunt exits the process\n        // without a stack trace. We'll force Grunt to output the stack trace.\n        // This can be done by the --stack option which is false by default.\n        // But this will also output warnings (such as \"task failed\") in addition\n        // to fatal errors.\n\n        // We need a named function to check whether this is previously added.\n        // Bec. since this is a \"multi\" task, this handler will get added\n        // every time.\n        function _taskFatalHandler_(e) {\n            var err = e ? (e.stack || e.message || e) : 'Unknown Error';\n            grunt.fatal(err, grunt.fail.code.TASK_FAILURE);\n        }\n        // The default Grunt handler:\n        // function (e) { fail.fatal(e, fail.code.TASK_FAILURE); }\n\n        if (options.traceFatal === 1 || options.traceFatal === true) {\n            var handlers = process.listeners('uncaughtException'),\n                alreadyAdded = handlers.some(function (handler) {\n                    return handler.name === '_taskFatalHandler_';\n                });\n            if (!alreadyAdded) {\n                process.removeAllListeners('uncaughtException');\n                // add the handler before any other\n                handlers.unshift(_taskFatalHandler_);\n                handlers.forEach(function (handler) {\n                    process.on('uncaughtException', handler);\n                });\n            }\n        } else if (options.traceFatal === 2) {\n            grunt.option('stack', true);\n        }\n\n        // EXECUTE SPEC (and HELPER) FILES\n\n        // Spec files\n        var specSuffixes = normalizeSuffixes(options.specNameSuffix),\n            specFiles = expand(conf.specs || [], specSuffixes),\n            gruntFilter = grunt.option('filter');\n\n        grunt.verbose.writeln('Spec Files:\\n  ', specFiles);\n\n        if (gruntFilter) {\n            specFiles = specFilter(gruntFilter, specFiles);\n            grunt.verbose.writeln('Filtered Spec Files:\\n  ', specFiles);\n        }\n\n        // Helper files\n        grunt.verbose.writeln(options.useHelpers ? 'Loading helpers...' : 'Helpers are disabled!');\n        if (options.useHelpers) {\n            var helperSuffixes = normalizeSuffixes(options.helperNameSuffix);\n            // merge global and target helpers\n            helperFiles = (conf.helpers || []).concat(options.helpers || []);\n            helperFiles = expand(helperFiles, helperSuffixes);\n            grunt.verbose.writeln('Helper Files:\\n  ', helperFiles);\n            jasmineRunner.loadHelpers(helperFiles);\n        }\n\n        jasmineRunner.loadSpecs(specFiles);\n        jasmineRunner.execute();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jasmine-nodejs/node_modules/grunt-jasmine-nodejs/tasks/lib/jasmine.runner.js":"/**\n *  Jasmine.Runner\n *  @author   Onur Yıldırım (onur@cutepilot.com)\n *  @version  1.0.6 (2016-02-27)\n *  @license  MIT\n */\nmodule.exports = (function () {\n    'use strict';\n\n    var jasmineCore = require('jasmine-core');\n\n    // ---------------------------\n    //  Helper Methods\n    // ---------------------------\n\n    function requireFiles(files) {\n        files.forEach(function (file) {\n            require(file);\n        });\n    }\n\n    function unloadFiles(files) {\n        files.forEach(function (file) {\n            delete require.cache[file];\n        });\n    }\n\n    // ---------------------------\n    //  CLASS: JasmineRunner\n    // ---------------------------\n\n    function JasmineRunner(options) {\n        options = options || {};\n        this.jasmine = jasmineCore.boot(jasmineCore);\n        this.env = this.jasmine.getEnv();\n        this.env.throwOnExpectationFailure(Boolean(options.stopOnFailure));\n        this.env.randomizeTests(Boolean(options.random));\n        this.env.seed(Boolean(options.seed));\n        if (typeof options.defaultTimeout === 'number' && options.defaultTimeout >= 0) {\n            this.jasmine.DEFAULT_TIMEOUT_INTERVAL = options.defaultTimeout;\n        }\n        this._reporters = [];\n    }\n\n    JasmineRunner.isValidReporter = function (object) {\n        return typeof object === 'object'\n            && typeof object.jasmineDone === 'function'\n            && typeof object.specDone === 'function';\n    };\n\n    JasmineRunner.prototype.addReporter = function (reporter, onDone) {\n        reporter.name = reporter.name || 'Reporter #' + (this._reporters.length + 1);\n        if (!JasmineRunner.isValidReporter(reporter)) {\n            throw new Error(reporter.name + ' is not a valid Jasmine reporter.');\n        }\n        // store original callbacks\n        var specDone = reporter.specDone,\n            // suiteDone is not mandatory for reporters\n            suiteDone = reporter.suiteDone,\n            jasmineDone = reporter.jasmineDone;\n\n        // mark whether this has failed\n        reporter.specDone = function (spec) {\n            if (spec.status === 'failed') {\n                this.__failed = true;\n            }\n            specDone(spec);\n        };\n        if (typeof suiteDone === 'function') {\n            reporter.suiteDone = function (suite) {\n                if (suite.failedExpectations.length > 0) {\n                    this.__failed = true;\n                }\n                suiteDone(suite);\n            };\n        }\n        // inject our callback\n        reporter.jasmineDone = function () {\n            jasmineDone();\n            onDone(!this.__failed);\n        };\n        this.env.addReporter(reporter);\n        this._reporters.push(reporter);\n        return reporter;\n    };\n\n    JasmineRunner.prototype.getReporters = function () {\n        return this._reporters;\n    };\n\n    JasmineRunner.prototype.addMatchers = function (matchers) {\n        this.jasmine.Expectation.addMatchers(matchers);\n    };\n\n    JasmineRunner.prototype.unloadHelpers = unloadFiles;\n\n    JasmineRunner.prototype.loadHelpers = requireFiles;\n\n    JasmineRunner.prototype.loadSpecs = requireFiles;\n\n    JasmineRunner.prototype.execute = function () {\n        this.env.execute();\n    };\n\n    // ---------------------------\n    //  EXPORT\n    // ---------------------------\n\n    return JasmineRunner;\n\n})();\n"}